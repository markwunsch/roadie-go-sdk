package roadie

import (
	"context"
	"fmt"
	"strconv"
	"strings"
	"time"
)

// ShipmentsService has methods for interacting with estimates in roadie
type ShipmentsService service

// CreateShipmentRequest is the request object for creating shipments
type CreateShipmentRequest struct {
	// ReferenceId is the user supplied ID for the shipment. Max length 100 characters (required)
	ReferenceId string
	// IdempotencyKey is a unique value generated by the user which the Roadie system will use to recognize subsequent retries of the same request.
	// Duplicate requests with the same idempotency_key value will yield a 409 conflict response after the first successful 200 response.
	// Can only be supplied when creating a shipment.
	IdempotencyKey string
	// AlternateId1 is the user-supplied alternate identifier 1
	AlternateId1 string
	// AlternateId2 is the user-supplied alternate identifier 2
	AlternateId2 string
	// Description is a general description for the shipment, often containing important information for the driver. This field is globally visible to all users on the platform.
	// Max length 600 characters
	Description string
	// Items is an array of one or more item (required)
	Items []Item
	// PickupLocation is a complete location object (required)
	PickupLocation Location
	// DeliveryLocation is a complete location object (required)
	DeliveryLocation Location
	// PickupAfter is the time when the shipment is ready for pickup (required)
	PickupAfter time.Time
	// DeliverBetween is the window within which the shipment must be completed
	DeliverBetween TimeWindow
	// Options is any delivery options for the shipment
	Options DeliveryOptions
}

type CreateShipmentResponse struct {
	// Id is the id of the shipment, generated by roadie
	Id int64
	// ReferenceId is the user supplied ID for the shipment. Max length 100 characters (required)
	ReferenceId string
	// State is the state of the shipment
	State string
	// AlternateId1 is the user-supplied alternate identifier 1
	AlternateId1 string
	// AlternateId2 is the user-supplied alternate identifier 2
	AlternateId2 string
	// Description is a general description for the shipment, often containing important information for the driver. This field is globally visible to all users on the platform.
	// Max length 600 characters
	Description string
	// Items is an array of one or more item (required)
	Items []Item
	// PickupLocation is a complete location object (required)
	PickupLocation Location
	// DeliveryLocation is a complete location object (required)
	DeliveryLocation Location
	// PickupAfter is the time when the shipment is ready for pickup (required)
	PickupAfter time.Time
	// DeliverBetween is the window within which the shipment must be completed
	DeliverBetween TimeWindow
	// Options is any delivery options for the shipment
	Options DeliveryOptions
	// TrackingNumber is the tracking number associated with the shipment
	TrackingNumber string
	// Price is the price of the shipment
	Price float32
	// EstimatedDistance is the estimated distance of the shipment
	EstimatedDistance float32
	// Events is an array of shipment events associated with the shipment
	Events []ShipmentEvent
	// CreatedAt is the timestamp the shipment was created
	CreatedAt time.Time
	// UpdatedAt is the timestamp of the shipment's most recent update
	UpdatedAt time.Time
	// Errors contains any errors returned from the API
	Errors ErrorResponse
}

// GetShipmentResponse is identical to the response from the shipment creation endpoint
type GetShipmentResponse CreateShipmentResponse

// UpdateShipmentResponse is identical to the response from the shipment creation endpoint
type UpdateShipmentResponse CreateShipmentResponse

// UpdateShipmentRequest is the request object for updating shipments
type UpdateShipmentRequest struct {
	// ReferenceId is the reference id of the shipment to update
	ReferenceId string
	// AlternateId1 is the user-supplied alternate identifier 1
	AlternateId1 string
	// AlternateId2 is the user-supplied alternate identifier 2
	AlternateId2 string
	// Description is a general description for the shipment, often containing important information for the driver. This field is globally visible to all users on the platform.
	// Max length 600 characters
	Description string
	// Items is an array of one or more item (required)
	Items []Item
	// PickupLocation is a complete location object (required)
	PickupLocation Location
	// DeliveryLocation is a complete location object (required)
	DeliveryLocation Location
	// PickupAfter is the time when the shipment is ready for pickup (required)
	PickupAfter time.Time
	// DeliverBetween is the window within which the shipment must be completed
	DeliverBetween TimeWindow
	// Options is any delivery options for the shipment
	Options DeliveryOptions
	// TrackingNumber is the tracking number associated with the shipment
	Events []ShipmentEvent
}

// CancelShipmentRequest is the request object for canceling shipments
type CancelShipmentRequest struct {
	// CancellationCode is the cancellation code matching the reason for the cancellation
	CancellationCode string
	// CancellationComment is an additional comment explaining the cancellation reason
	CancellationComment string
}

// LeaveTipRequest is the request object for leaving a tip
type LeaveTipRequest struct {
	// Amount is the amount of tip to leave
	Amount float32
}

// LeaveTipResponse is identical to LeaveTipRequest
type LeaveTipResponse struct {
	// Amount is the amount of tip to leave
	Amount float32
	// Errors contains any errors returned from the API
	Errors ErrorResponse
}

// RateDriverRequest is the request object for leaving a tip
type RateDriverRequest struct {
	Value int
}

// RateDriverResponse is identical to RateDriverRequest
type RateDriverResponse struct {
	// Value is the value of the rating to give the driver
	Value int
	// Errors contains any errors returned from the API
	Errors ErrorResponse
}

// Create creates a shipment
func (shp *ShipmentsService) Create(ctx context.Context, shipment CreateShipmentRequest) (*CreateShipmentResponse, error) {
	req, err := shp.client.createRequest("POST", "shipments", shipment)
	if err != nil {
		return nil, err
	}

	shipmentResponse := new(CreateShipmentResponse)
	err = shp.client.do(ctx, req, shipmentResponse)
	if err != nil {
		return nil, err
	}
	return shipmentResponse, nil
}

// Get retrieves a shipment
func (shp *ShipmentsService) Get(ctx context.Context, shipmentId int64) (*GetShipmentResponse, error) {
	path := fmt.Sprintf(`shipments/%d`, shipmentId)
	req, err := shp.client.createRequest("GET", path, nil)
	if err != nil {
		return nil, err
	}

	shipmentResponse := new(GetShipmentResponse)
	err = shp.client.do(ctx, req, shipmentResponse)
	if err != nil {
		return nil, err
	}
	return shipmentResponse, nil
}

// GetByIds retrieves a list of shipments by Ids
func (shp *ShipmentsService) GetByIds(ctx context.Context, ids []int64) ([]*GetShipmentResponse, error) {
	path := fmt.Sprintf(`shipments/ids=%s`, idsToPath(ids))
	req, err := shp.client.createRequest("GET", path, nil)
	if err != nil {
		return nil, err
	}

	shipmentResponse := new([]*GetShipmentResponse)
	err = shp.client.do(ctx, req, shipmentResponse)
	if err != nil {
		return nil, err
	}
	return *shipmentResponse, nil
}

// GetByReferenceIds retrieves a list of shipments by reference ids
func (shp *ShipmentsService) GetByReferenceIds(ctx context.Context, referenceIds []string) ([]*GetShipmentResponse, error) {
	path := fmt.Sprintf(`shipments/reference_ids=%s`, strings.Join(referenceIds, `,`))
	req, err := shp.client.createRequest("GET", path, nil)
	if err != nil {
		return nil, err
	}

	shipmentResponse := new([]*GetShipmentResponse)
	err = shp.client.do(ctx, req, shipmentResponse)
	if err != nil {
		return nil, err
	}
	return *shipmentResponse, nil
}

// Update updates a shipment
func (shp *ShipmentsService) Update(ctx context.Context, shipmentId int64, shipment UpdateShipmentRequest) (*UpdateShipmentResponse, error) {
	path := fmt.Sprintf(`shipments/%d`, shipmentId)
	req, err := shp.client.createRequest("PATCH", path, shipment)
	if err != nil {
		return nil, err
	}

	shipmentResponse := new(UpdateShipmentResponse)
	err = shp.client.do(ctx, req, shipmentResponse)
	if err != nil {
		return nil, err
	}
	return shipmentResponse, nil
}

// Cancel cancels a shipment
func (shp *ShipmentsService) Cancel(ctx context.Context, shipmentId int64, cancelRequest CancelShipmentRequest) (*UpdateShipmentResponse, error) {
	path := fmt.Sprintf(`shipments/%d`, shipmentId)
	req, err := shp.client.createRequest("DELETE", path, cancelRequest)
	if err != nil {
		return nil, err
	}

	shipmentResponse := new(UpdateShipmentResponse)
	err = shp.client.do(ctx, req, shipmentResponse)
	if err != nil {
		return nil, err
	}
	return shipmentResponse, nil
}

// TipDriver is used to leave a tip for the driver
func (shp *ShipmentsService) TipDriver(ctx context.Context, shipmentId int64, amount float32) (*LeaveTipResponse, error) {
	path := fmt.Sprintf(`shipments/%d/tips`, shipmentId)
	tipRequest := LeaveTipRequest{
		Amount: amount,
	}
	req, err := shp.client.createRequest("POST", path, tipRequest)
	if err != nil {
		return nil, err
	}

	tipResponse := new(LeaveTipResponse)
	err = shp.client.do(ctx, req, tipResponse)
	if err != nil {
		return nil, err
	}
	return tipResponse, nil
}

// RateDriver is used to leave a rating for the driver
func (shp *ShipmentsService) RateDriver(ctx context.Context, shipmentId int64, rating int) (*RateDriverResponse, error) {
	path := fmt.Sprintf(`shipments/%d/ratings`, shipmentId)
	tipRequest := RateDriverRequest{
		Value: rating,
	}
	req, err := shp.client.createRequest("POST", path, tipRequest)
	if err != nil {
		return nil, err
	}

	ratingResponse := new(RateDriverResponse)
	err = shp.client.do(ctx, req, ratingResponse)
	if err != nil {
		return nil, err
	}
	return ratingResponse, nil
}

func idsToPath(ids []int64) string {
	var idsString []string
	for _, i := range ids {
		idsString = append(idsString, strconv.FormatInt(i, 10))
	}
	return strings.Join(idsString, `,`)
}
